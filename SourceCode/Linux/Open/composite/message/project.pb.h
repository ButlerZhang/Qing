// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_project_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_project_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_project_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_project_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_project_2eproto;
namespace Project {
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
class RandomMessage;
class RandomMessageDefaultTypeInternal;
extern RandomMessageDefaultTypeInternal _RandomMessage_default_instance_;
class ServerError;
class ServerErrorDefaultTypeInternal;
extern ServerErrorDefaultTypeInternal _ServerError_default_instance_;
class UserLogin;
class UserLoginDefaultTypeInternal;
extern UserLoginDefaultTypeInternal _UserLogin_default_instance_;
class UserLogout;
class UserLogoutDefaultTypeInternal;
extern UserLogoutDefaultTypeInternal _UserLogout_default_instance_;
}  // namespace Project
PROTOBUF_NAMESPACE_OPEN
template<> ::Project::MessageHeader* Arena::CreateMaybeMessage<::Project::MessageHeader>(Arena*);
template<> ::Project::RandomMessage* Arena::CreateMaybeMessage<::Project::RandomMessage>(Arena*);
template<> ::Project::ServerError* Arena::CreateMaybeMessage<::Project::ServerError>(Arena*);
template<> ::Project::UserLogin* Arena::CreateMaybeMessage<::Project::UserLogin>(Arena*);
template<> ::Project::UserLogout* Arena::CreateMaybeMessage<::Project::UserLogout>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Project {

enum MessageType : int {
  MT_UNKNOW = 0,
  MT_ERROR = 1000,
  MT_RANDOM = 1001,
  MT_LOGIN = 1002,
  MT_LOGIN_RESPONSE = 1003,
  MT_LOGOUT = 1004,
  MT_LOGOUT_RESPONSE = 1005,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = MT_UNKNOW;
constexpr MessageType MessageType_MAX = MT_LOGOUT_RESPONSE;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    const std::string& name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class MessageHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Project.MessageHeader) */ {
 public:
  MessageHeader();
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MessageHeader* other);
  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(nullptr);
  }

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Project.MessageHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_project_2eproto);
    return ::descriptor_table_project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string TransmissionID = 2;
  void clear_transmissionid();
  static const int kTransmissionIDFieldNumber = 2;
  const std::string& transmissionid() const;
  void set_transmissionid(const std::string& value);
  void set_transmissionid(std::string&& value);
  void set_transmissionid(const char* value);
  void set_transmissionid(const char* value, size_t size);
  std::string* mutable_transmissionid();
  std::string* release_transmissionid();
  void set_allocated_transmissionid(std::string* transmissionid);

  // .Project.MessageType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Project::MessageType type() const;
  void set_type(::Project::MessageType value);

  // @@protoc_insertion_point(class_scope:Project.MessageHeader)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transmissionid_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class UserLogin :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Project.UserLogin) */ {
 public:
  UserLogin();
  virtual ~UserLogin();

  UserLogin(const UserLogin& from);
  UserLogin(UserLogin&& from) noexcept
    : UserLogin() {
    *this = ::std::move(from);
  }

  inline UserLogin& operator=(const UserLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogin& operator=(UserLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLogin* internal_default_instance() {
    return reinterpret_cast<const UserLogin*>(
               &_UserLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UserLogin* other);
  friend void swap(UserLogin& a, UserLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLogin* New() const final {
    return CreateMaybeMessage<UserLogin>(nullptr);
  }

  UserLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLogin& from);
  void MergeFrom(const UserLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Project.UserLogin";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_project_2eproto);
    return ::descriptor_table_project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string Nickname = 6;
  int nickname_size() const;
  void clear_nickname();
  static const int kNicknameFieldNumber = 6;
  const std::string& nickname(int index) const;
  std::string* mutable_nickname(int index);
  void set_nickname(int index, const std::string& value);
  void set_nickname(int index, std::string&& value);
  void set_nickname(int index, const char* value);
  void set_nickname(int index, const char* value, size_t size);
  std::string* add_nickname();
  void add_nickname(const std::string& value);
  void add_nickname(std::string&& value);
  void add_nickname(const char* value);
  void add_nickname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nickname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nickname();

  // string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string Password = 4;
  void clear_password();
  static const int kPasswordFieldNumber = 4;
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);

  // string Authority = 5;
  void clear_authority();
  static const int kAuthorityFieldNumber = 5;
  const std::string& authority() const;
  void set_authority(const std::string& value);
  void set_authority(std::string&& value);
  void set_authority(const char* value);
  void set_authority(const char* value, size_t size);
  std::string* mutable_authority();
  std::string* release_authority();
  void set_allocated_authority(std::string* authority);

  // .Project.MessageHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Project::MessageHeader& header() const;
  ::Project::MessageHeader* release_header();
  ::Project::MessageHeader* mutable_header();
  void set_allocated_header(::Project::MessageHeader* header);

  // int32 ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Project.UserLogin)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
  ::Project::MessageHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class UserLogout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Project.UserLogout) */ {
 public:
  UserLogout();
  virtual ~UserLogout();

  UserLogout(const UserLogout& from);
  UserLogout(UserLogout&& from) noexcept
    : UserLogout() {
    *this = ::std::move(from);
  }

  inline UserLogout& operator=(const UserLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogout& operator=(UserLogout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLogout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserLogout* internal_default_instance() {
    return reinterpret_cast<const UserLogout*>(
               &_UserLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(UserLogout* other);
  friend void swap(UserLogout& a, UserLogout& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLogout* New() const final {
    return CreateMaybeMessage<UserLogout>(nullptr);
  }

  UserLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLogout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLogout& from);
  void MergeFrom(const UserLogout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Project.UserLogout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_project_2eproto);
    return ::descriptor_table_project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .Project.MessageHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Project::MessageHeader& header() const;
  ::Project::MessageHeader* release_header();
  ::Project::MessageHeader* mutable_header();
  void set_allocated_header(::Project::MessageHeader* header);

  // int32 ID = 2;
  void clear_id();
  static const int kIDFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Project.UserLogout)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Project::MessageHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class RandomMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Project.RandomMessage) */ {
 public:
  RandomMessage();
  virtual ~RandomMessage();

  RandomMessage(const RandomMessage& from);
  RandomMessage(RandomMessage&& from) noexcept
    : RandomMessage() {
    *this = ::std::move(from);
  }

  inline RandomMessage& operator=(const RandomMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RandomMessage& operator=(RandomMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RandomMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RandomMessage* internal_default_instance() {
    return reinterpret_cast<const RandomMessage*>(
               &_RandomMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RandomMessage* other);
  friend void swap(RandomMessage& a, RandomMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RandomMessage* New() const final {
    return CreateMaybeMessage<RandomMessage>(nullptr);
  }

  RandomMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RandomMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RandomMessage& from);
  void MergeFrom(const RandomMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RandomMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Project.RandomMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_project_2eproto);
    return ::descriptor_table_project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string RandomDescriptor = 4;
  void clear_randomdescriptor();
  static const int kRandomDescriptorFieldNumber = 4;
  const std::string& randomdescriptor() const;
  void set_randomdescriptor(const std::string& value);
  void set_randomdescriptor(std::string&& value);
  void set_randomdescriptor(const char* value);
  void set_randomdescriptor(const char* value, size_t size);
  std::string* mutable_randomdescriptor();
  std::string* release_randomdescriptor();
  void set_allocated_randomdescriptor(std::string* randomdescriptor);

  // .Project.MessageHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Project::MessageHeader& header() const;
  ::Project::MessageHeader* release_header();
  ::Project::MessageHeader* mutable_header();
  void set_allocated_header(::Project::MessageHeader* header);

  // int64 ClientSequence = 2;
  void clear_clientsequence();
  static const int kClientSequenceFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int64 clientsequence() const;
  void set_clientsequence(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 ServerSequence = 3;
  void clear_serversequence();
  static const int kServerSequenceFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 serversequence() const;
  void set_serversequence(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:Project.RandomMessage)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr randomdescriptor_;
  ::Project::MessageHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 clientsequence_;
  ::PROTOBUF_NAMESPACE_ID::int64 serversequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class ServerError :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Project.ServerError) */ {
 public:
  ServerError();
  virtual ~ServerError();

  ServerError(const ServerError& from);
  ServerError(ServerError&& from) noexcept
    : ServerError() {
    *this = ::std::move(from);
  }

  inline ServerError& operator=(const ServerError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerError& operator=(ServerError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerError* internal_default_instance() {
    return reinterpret_cast<const ServerError*>(
               &_ServerError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ServerError* other);
  friend void swap(ServerError& a, ServerError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerError* New() const final {
    return CreateMaybeMessage<ServerError>(nullptr);
  }

  ServerError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerError& from);
  void MergeFrom(const ServerError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Project.ServerError";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_project_2eproto);
    return ::descriptor_table_project_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ErrorDescriptor = 3;
  void clear_errordescriptor();
  static const int kErrorDescriptorFieldNumber = 3;
  const std::string& errordescriptor() const;
  void set_errordescriptor(const std::string& value);
  void set_errordescriptor(std::string&& value);
  void set_errordescriptor(const char* value);
  void set_errordescriptor(const char* value, size_t size);
  std::string* mutable_errordescriptor();
  std::string* release_errordescriptor();
  void set_allocated_errordescriptor(std::string* errordescriptor);

  // .Project.MessageHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::Project::MessageHeader& header() const;
  ::Project::MessageHeader* release_header();
  ::Project::MessageHeader* mutable_header();
  void set_allocated_header(::Project::MessageHeader* header);

  // int32 ErrorType = 2;
  void clear_errortype();
  static const int kErrorTypeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 errortype() const;
  void set_errortype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Project.ServerError)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordescriptor_;
  ::Project::MessageHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 errortype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageHeader

// .Project.MessageType Type = 1;
inline void MessageHeader::clear_type() {
  type_ = 0;
}
inline ::Project::MessageType MessageHeader::type() const {
  // @@protoc_insertion_point(field_get:Project.MessageHeader.Type)
  return static_cast< ::Project::MessageType >(type_);
}
inline void MessageHeader::set_type(::Project::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Project.MessageHeader.Type)
}

// string TransmissionID = 2;
inline void MessageHeader::clear_transmissionid() {
  transmissionid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageHeader::transmissionid() const {
  // @@protoc_insertion_point(field_get:Project.MessageHeader.TransmissionID)
  return transmissionid_.GetNoArena();
}
inline void MessageHeader::set_transmissionid(const std::string& value) {
  
  transmissionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Project.MessageHeader.TransmissionID)
}
inline void MessageHeader::set_transmissionid(std::string&& value) {
  
  transmissionid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Project.MessageHeader.TransmissionID)
}
inline void MessageHeader::set_transmissionid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transmissionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Project.MessageHeader.TransmissionID)
}
inline void MessageHeader::set_transmissionid(const char* value, size_t size) {
  
  transmissionid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Project.MessageHeader.TransmissionID)
}
inline std::string* MessageHeader::mutable_transmissionid() {
  
  // @@protoc_insertion_point(field_mutable:Project.MessageHeader.TransmissionID)
  return transmissionid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageHeader::release_transmissionid() {
  // @@protoc_insertion_point(field_release:Project.MessageHeader.TransmissionID)
  
  return transmissionid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageHeader::set_allocated_transmissionid(std::string* transmissionid) {
  if (transmissionid != nullptr) {
    
  } else {
    
  }
  transmissionid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transmissionid);
  // @@protoc_insertion_point(field_set_allocated:Project.MessageHeader.TransmissionID)
}

// -------------------------------------------------------------------

// UserLogin

// .Project.MessageHeader header = 1;
inline bool UserLogin::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void UserLogin::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Project::MessageHeader& UserLogin::header() const {
  const ::Project::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:Project.UserLogin.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::Project::MessageHeader*>(
      &::Project::_MessageHeader_default_instance_);
}
inline ::Project::MessageHeader* UserLogin::release_header() {
  // @@protoc_insertion_point(field_release:Project.UserLogin.header)
  
  ::Project::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Project::MessageHeader* UserLogin::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Project::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Project.UserLogin.header)
  return header_;
}
inline void UserLogin::set_allocated_header(::Project::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Project.UserLogin.header)
}

// int32 ID = 2;
inline void UserLogin::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLogin::id() const {
  // @@protoc_insertion_point(field_get:Project.UserLogin.ID)
  return id_;
}
inline void UserLogin::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Project.UserLogin.ID)
}

// string Name = 3;
inline void UserLogin::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLogin::name() const {
  // @@protoc_insertion_point(field_get:Project.UserLogin.Name)
  return name_.GetNoArena();
}
inline void UserLogin::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Project.UserLogin.Name)
}
inline void UserLogin::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Project.UserLogin.Name)
}
inline void UserLogin::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Project.UserLogin.Name)
}
inline void UserLogin::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Project.UserLogin.Name)
}
inline std::string* UserLogin::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Project.UserLogin.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLogin::release_name() {
  // @@protoc_insertion_point(field_release:Project.UserLogin.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLogin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Project.UserLogin.Name)
}

// string Password = 4;
inline void UserLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLogin::password() const {
  // @@protoc_insertion_point(field_get:Project.UserLogin.Password)
  return password_.GetNoArena();
}
inline void UserLogin::set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Project.UserLogin.Password)
}
inline void UserLogin::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Project.UserLogin.Password)
}
inline void UserLogin::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Project.UserLogin.Password)
}
inline void UserLogin::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Project.UserLogin.Password)
}
inline std::string* UserLogin::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:Project.UserLogin.Password)
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLogin::release_password() {
  // @@protoc_insertion_point(field_release:Project.UserLogin.Password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:Project.UserLogin.Password)
}

// string Authority = 5;
inline void UserLogin::clear_authority() {
  authority_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLogin::authority() const {
  // @@protoc_insertion_point(field_get:Project.UserLogin.Authority)
  return authority_.GetNoArena();
}
inline void UserLogin::set_authority(const std::string& value) {
  
  authority_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Project.UserLogin.Authority)
}
inline void UserLogin::set_authority(std::string&& value) {
  
  authority_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Project.UserLogin.Authority)
}
inline void UserLogin::set_authority(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  authority_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Project.UserLogin.Authority)
}
inline void UserLogin::set_authority(const char* value, size_t size) {
  
  authority_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Project.UserLogin.Authority)
}
inline std::string* UserLogin::mutable_authority() {
  
  // @@protoc_insertion_point(field_mutable:Project.UserLogin.Authority)
  return authority_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLogin::release_authority() {
  // @@protoc_insertion_point(field_release:Project.UserLogin.Authority)
  
  return authority_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLogin::set_allocated_authority(std::string* authority) {
  if (authority != nullptr) {
    
  } else {
    
  }
  authority_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authority);
  // @@protoc_insertion_point(field_set_allocated:Project.UserLogin.Authority)
}

// repeated string Nickname = 6;
inline int UserLogin::nickname_size() const {
  return nickname_.size();
}
inline void UserLogin::clear_nickname() {
  nickname_.Clear();
}
inline const std::string& UserLogin::nickname(int index) const {
  // @@protoc_insertion_point(field_get:Project.UserLogin.Nickname)
  return nickname_.Get(index);
}
inline std::string* UserLogin::mutable_nickname(int index) {
  // @@protoc_insertion_point(field_mutable:Project.UserLogin.Nickname)
  return nickname_.Mutable(index);
}
inline void UserLogin::set_nickname(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Project.UserLogin.Nickname)
  nickname_.Mutable(index)->assign(value);
}
inline void UserLogin::set_nickname(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Project.UserLogin.Nickname)
  nickname_.Mutable(index)->assign(std::move(value));
}
inline void UserLogin::set_nickname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nickname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Project.UserLogin.Nickname)
}
inline void UserLogin::set_nickname(int index, const char* value, size_t size) {
  nickname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Project.UserLogin.Nickname)
}
inline std::string* UserLogin::add_nickname() {
  // @@protoc_insertion_point(field_add_mutable:Project.UserLogin.Nickname)
  return nickname_.Add();
}
inline void UserLogin::add_nickname(const std::string& value) {
  nickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Project.UserLogin.Nickname)
}
inline void UserLogin::add_nickname(std::string&& value) {
  nickname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Project.UserLogin.Nickname)
}
inline void UserLogin::add_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Project.UserLogin.Nickname)
}
inline void UserLogin::add_nickname(const char* value, size_t size) {
  nickname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Project.UserLogin.Nickname)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserLogin::nickname() const {
  // @@protoc_insertion_point(field_list:Project.UserLogin.Nickname)
  return nickname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserLogin::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable_list:Project.UserLogin.Nickname)
  return &nickname_;
}

// -------------------------------------------------------------------

// UserLogout

// .Project.MessageHeader header = 1;
inline bool UserLogout::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void UserLogout::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Project::MessageHeader& UserLogout::header() const {
  const ::Project::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:Project.UserLogout.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::Project::MessageHeader*>(
      &::Project::_MessageHeader_default_instance_);
}
inline ::Project::MessageHeader* UserLogout::release_header() {
  // @@protoc_insertion_point(field_release:Project.UserLogout.header)
  
  ::Project::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Project::MessageHeader* UserLogout::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Project::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Project.UserLogout.header)
  return header_;
}
inline void UserLogout::set_allocated_header(::Project::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Project.UserLogout.header)
}

// int32 ID = 2;
inline void UserLogout::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLogout::id() const {
  // @@protoc_insertion_point(field_get:Project.UserLogout.ID)
  return id_;
}
inline void UserLogout::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Project.UserLogout.ID)
}

// string Name = 3;
inline void UserLogout::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UserLogout::name() const {
  // @@protoc_insertion_point(field_get:Project.UserLogout.Name)
  return name_.GetNoArena();
}
inline void UserLogout::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Project.UserLogout.Name)
}
inline void UserLogout::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Project.UserLogout.Name)
}
inline void UserLogout::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Project.UserLogout.Name)
}
inline void UserLogout::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Project.UserLogout.Name)
}
inline std::string* UserLogout::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Project.UserLogout.Name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserLogout::release_name() {
  // @@protoc_insertion_point(field_release:Project.UserLogout.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserLogout::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Project.UserLogout.Name)
}

// -------------------------------------------------------------------

// RandomMessage

// .Project.MessageHeader header = 1;
inline bool RandomMessage::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void RandomMessage::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Project::MessageHeader& RandomMessage::header() const {
  const ::Project::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:Project.RandomMessage.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::Project::MessageHeader*>(
      &::Project::_MessageHeader_default_instance_);
}
inline ::Project::MessageHeader* RandomMessage::release_header() {
  // @@protoc_insertion_point(field_release:Project.RandomMessage.header)
  
  ::Project::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Project::MessageHeader* RandomMessage::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Project::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Project.RandomMessage.header)
  return header_;
}
inline void RandomMessage::set_allocated_header(::Project::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Project.RandomMessage.header)
}

// int64 ClientSequence = 2;
inline void RandomMessage::clear_clientsequence() {
  clientsequence_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RandomMessage::clientsequence() const {
  // @@protoc_insertion_point(field_get:Project.RandomMessage.ClientSequence)
  return clientsequence_;
}
inline void RandomMessage::set_clientsequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  clientsequence_ = value;
  // @@protoc_insertion_point(field_set:Project.RandomMessage.ClientSequence)
}

// int64 ServerSequence = 3;
inline void RandomMessage::clear_serversequence() {
  serversequence_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RandomMessage::serversequence() const {
  // @@protoc_insertion_point(field_get:Project.RandomMessage.ServerSequence)
  return serversequence_;
}
inline void RandomMessage::set_serversequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  serversequence_ = value;
  // @@protoc_insertion_point(field_set:Project.RandomMessage.ServerSequence)
}

// string RandomDescriptor = 4;
inline void RandomMessage::clear_randomdescriptor() {
  randomdescriptor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RandomMessage::randomdescriptor() const {
  // @@protoc_insertion_point(field_get:Project.RandomMessage.RandomDescriptor)
  return randomdescriptor_.GetNoArena();
}
inline void RandomMessage::set_randomdescriptor(const std::string& value) {
  
  randomdescriptor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Project.RandomMessage.RandomDescriptor)
}
inline void RandomMessage::set_randomdescriptor(std::string&& value) {
  
  randomdescriptor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Project.RandomMessage.RandomDescriptor)
}
inline void RandomMessage::set_randomdescriptor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  randomdescriptor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Project.RandomMessage.RandomDescriptor)
}
inline void RandomMessage::set_randomdescriptor(const char* value, size_t size) {
  
  randomdescriptor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Project.RandomMessage.RandomDescriptor)
}
inline std::string* RandomMessage::mutable_randomdescriptor() {
  
  // @@protoc_insertion_point(field_mutable:Project.RandomMessage.RandomDescriptor)
  return randomdescriptor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RandomMessage::release_randomdescriptor() {
  // @@protoc_insertion_point(field_release:Project.RandomMessage.RandomDescriptor)
  
  return randomdescriptor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RandomMessage::set_allocated_randomdescriptor(std::string* randomdescriptor) {
  if (randomdescriptor != nullptr) {
    
  } else {
    
  }
  randomdescriptor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), randomdescriptor);
  // @@protoc_insertion_point(field_set_allocated:Project.RandomMessage.RandomDescriptor)
}

// -------------------------------------------------------------------

// ServerError

// .Project.MessageHeader header = 1;
inline bool ServerError::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline void ServerError::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Project::MessageHeader& ServerError::header() const {
  const ::Project::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:Project.ServerError.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::Project::MessageHeader*>(
      &::Project::_MessageHeader_default_instance_);
}
inline ::Project::MessageHeader* ServerError::release_header() {
  // @@protoc_insertion_point(field_release:Project.ServerError.header)
  
  ::Project::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Project::MessageHeader* ServerError::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Project::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Project.ServerError.header)
  return header_;
}
inline void ServerError::set_allocated_header(::Project::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Project.ServerError.header)
}

// int32 ErrorType = 2;
inline void ServerError::clear_errortype() {
  errortype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerError::errortype() const {
  // @@protoc_insertion_point(field_get:Project.ServerError.ErrorType)
  return errortype_;
}
inline void ServerError::set_errortype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errortype_ = value;
  // @@protoc_insertion_point(field_set:Project.ServerError.ErrorType)
}

// string ErrorDescriptor = 3;
inline void ServerError::clear_errordescriptor() {
  errordescriptor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ServerError::errordescriptor() const {
  // @@protoc_insertion_point(field_get:Project.ServerError.ErrorDescriptor)
  return errordescriptor_.GetNoArena();
}
inline void ServerError::set_errordescriptor(const std::string& value) {
  
  errordescriptor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Project.ServerError.ErrorDescriptor)
}
inline void ServerError::set_errordescriptor(std::string&& value) {
  
  errordescriptor_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Project.ServerError.ErrorDescriptor)
}
inline void ServerError::set_errordescriptor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errordescriptor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Project.ServerError.ErrorDescriptor)
}
inline void ServerError::set_errordescriptor(const char* value, size_t size) {
  
  errordescriptor_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Project.ServerError.ErrorDescriptor)
}
inline std::string* ServerError::mutable_errordescriptor() {
  
  // @@protoc_insertion_point(field_mutable:Project.ServerError.ErrorDescriptor)
  return errordescriptor_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ServerError::release_errordescriptor() {
  // @@protoc_insertion_point(field_release:Project.ServerError.ErrorDescriptor)
  
  return errordescriptor_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ServerError::set_allocated_errordescriptor(std::string* errordescriptor) {
  if (errordescriptor != nullptr) {
    
  } else {
    
  }
  errordescriptor_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errordescriptor);
  // @@protoc_insertion_point(field_set_allocated:Project.ServerError.ErrorDescriptor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Project

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Project::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Project::MessageType>() {
  return ::Project::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_project_2eproto
