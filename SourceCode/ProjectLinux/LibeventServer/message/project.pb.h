// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_project_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_project_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_project_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_project_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_project_2eproto;
namespace Project {
class MessageHeader;
struct MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
class RandomMessage;
struct RandomMessageDefaultTypeInternal;
extern RandomMessageDefaultTypeInternal _RandomMessage_default_instance_;
class ServerError;
struct ServerErrorDefaultTypeInternal;
extern ServerErrorDefaultTypeInternal _ServerError_default_instance_;
class UserLogin;
struct UserLoginDefaultTypeInternal;
extern UserLoginDefaultTypeInternal _UserLogin_default_instance_;
class UserLogout;
struct UserLogoutDefaultTypeInternal;
extern UserLogoutDefaultTypeInternal _UserLogout_default_instance_;
}  // namespace Project
PROTOBUF_NAMESPACE_OPEN
template<> ::Project::MessageHeader* Arena::CreateMaybeMessage<::Project::MessageHeader>(Arena*);
template<> ::Project::RandomMessage* Arena::CreateMaybeMessage<::Project::RandomMessage>(Arena*);
template<> ::Project::ServerError* Arena::CreateMaybeMessage<::Project::ServerError>(Arena*);
template<> ::Project::UserLogin* Arena::CreateMaybeMessage<::Project::UserLogin>(Arena*);
template<> ::Project::UserLogout* Arena::CreateMaybeMessage<::Project::UserLogout>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Project {

enum MessageType : int {
  MT_UNKNOW = 0,
  MT_ERROR = 1000,
  MT_RANDOM = 1001,
  MT_LOGIN = 1002,
  MT_LOGIN_RESPONSE = 1003,
  MT_LOGOUT = 1004,
  MT_LOGOUT_RESPONSE = 1005,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = MT_UNKNOW;
constexpr MessageType MessageType_MAX = MT_LOGOUT_RESPONSE;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class MessageHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Project.MessageHeader) */ {
 public:
  inline MessageHeader() : MessageHeader(nullptr) {}
  ~MessageHeader() override;
  explicit constexpr MessageHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return new MessageHeader();
  }

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MessageHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Project.MessageHeader";
  }
  protected:
  explicit MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransmissionIDFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string TransmissionID = 2;
  void clear_transmissionid();
  const std::string& transmissionid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_transmissionid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_transmissionid();
  PROTOBUF_MUST_USE_RESULT std::string* release_transmissionid();
  void set_allocated_transmissionid(std::string* transmissionid);
  private:
  const std::string& _internal_transmissionid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_transmissionid(const std::string& value);
  std::string* _internal_mutable_transmissionid();
  public:

  // .Project.MessageType Type = 1;
  void clear_type();
  ::Project::MessageType type() const;
  void set_type(::Project::MessageType value);
  private:
  ::Project::MessageType _internal_type() const;
  void _internal_set_type(::Project::MessageType value);
  public:

  // @@protoc_insertion_point(class_scope:Project.MessageHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transmissionid_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class UserLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Project.UserLogin) */ {
 public:
  inline UserLogin() : UserLogin(nullptr) {}
  ~UserLogin() override;
  explicit constexpr UserLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLogin(const UserLogin& from);
  UserLogin(UserLogin&& from) noexcept
    : UserLogin() {
    *this = ::std::move(from);
  }

  inline UserLogin& operator=(const UserLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogin& operator=(UserLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLogin* internal_default_instance() {
    return reinterpret_cast<const UserLogin*>(
               &_UserLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserLogin& a, UserLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLogin* New() const final {
    return new UserLogin();
  }

  UserLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLogin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLogin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserLogin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Project.UserLogin";
  }
  protected:
  explicit UserLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 6,
    kNameFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kAuthorityFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kIDFieldNumber = 2,
  };
  // repeated string Nickname = 6;
  int nickname_size() const;
  private:
  int _internal_nickname_size() const;
  public:
  void clear_nickname();
  const std::string& nickname(int index) const;
  std::string* mutable_nickname(int index);
  void set_nickname(int index, const std::string& value);
  void set_nickname(int index, std::string&& value);
  void set_nickname(int index, const char* value);
  void set_nickname(int index, const char* value, size_t size);
  std::string* add_nickname();
  void add_nickname(const std::string& value);
  void add_nickname(std::string&& value);
  void add_nickname(const char* value);
  void add_nickname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nickname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nickname();
  private:
  const std::string& _internal_nickname(int index) const;
  std::string* _internal_add_nickname();
  public:

  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Password = 4;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string Authority = 5;
  void clear_authority();
  const std::string& authority() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authority(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authority();
  PROTOBUF_MUST_USE_RESULT std::string* release_authority();
  void set_allocated_authority(std::string* authority);
  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(const std::string& value);
  std::string* _internal_mutable_authority();
  public:

  // .Project.MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Project::MessageHeader& header() const;
  PROTOBUF_MUST_USE_RESULT ::Project::MessageHeader* release_header();
  ::Project::MessageHeader* mutable_header();
  void set_allocated_header(::Project::MessageHeader* header);
  private:
  const ::Project::MessageHeader& _internal_header() const;
  ::Project::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Project::MessageHeader* header);
  ::Project::MessageHeader* unsafe_arena_release_header();

  // int32 ID = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Project.UserLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
  ::Project::MessageHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class UserLogout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Project.UserLogout) */ {
 public:
  inline UserLogout() : UserLogout(nullptr) {}
  ~UserLogout() override;
  explicit constexpr UserLogout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLogout(const UserLogout& from);
  UserLogout(UserLogout&& from) noexcept
    : UserLogout() {
    *this = ::std::move(from);
  }

  inline UserLogout& operator=(const UserLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogout& operator=(UserLogout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLogout& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLogout* internal_default_instance() {
    return reinterpret_cast<const UserLogout*>(
               &_UserLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserLogout& a, UserLogout& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLogout* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLogout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLogout* New() const final {
    return new UserLogout();
  }

  UserLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLogout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLogout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserLogout& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Project.UserLogout";
  }
  protected:
  explicit UserLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kIDFieldNumber = 2,
  };
  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Project.MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Project::MessageHeader& header() const;
  PROTOBUF_MUST_USE_RESULT ::Project::MessageHeader* release_header();
  ::Project::MessageHeader* mutable_header();
  void set_allocated_header(::Project::MessageHeader* header);
  private:
  const ::Project::MessageHeader& _internal_header() const;
  ::Project::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Project::MessageHeader* header);
  ::Project::MessageHeader* unsafe_arena_release_header();

  // int32 ID = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Project.UserLogout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Project::MessageHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class RandomMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Project.RandomMessage) */ {
 public:
  inline RandomMessage() : RandomMessage(nullptr) {}
  ~RandomMessage() override;
  explicit constexpr RandomMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RandomMessage(const RandomMessage& from);
  RandomMessage(RandomMessage&& from) noexcept
    : RandomMessage() {
    *this = ::std::move(from);
  }

  inline RandomMessage& operator=(const RandomMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RandomMessage& operator=(RandomMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RandomMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RandomMessage* internal_default_instance() {
    return reinterpret_cast<const RandomMessage*>(
               &_RandomMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RandomMessage& a, RandomMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RandomMessage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RandomMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RandomMessage* New() const final {
    return new RandomMessage();
  }

  RandomMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RandomMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RandomMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RandomMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RandomMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Project.RandomMessage";
  }
  protected:
  explicit RandomMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRandomDescriptorFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kClientSequenceFieldNumber = 2,
    kServerSequenceFieldNumber = 3,
    kSenderProcessIDFieldNumber = 4,
  };
  // string RandomDescriptor = 5;
  void clear_randomdescriptor();
  const std::string& randomdescriptor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_randomdescriptor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_randomdescriptor();
  PROTOBUF_MUST_USE_RESULT std::string* release_randomdescriptor();
  void set_allocated_randomdescriptor(std::string* randomdescriptor);
  private:
  const std::string& _internal_randomdescriptor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_randomdescriptor(const std::string& value);
  std::string* _internal_mutable_randomdescriptor();
  public:

  // .Project.MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Project::MessageHeader& header() const;
  PROTOBUF_MUST_USE_RESULT ::Project::MessageHeader* release_header();
  ::Project::MessageHeader* mutable_header();
  void set_allocated_header(::Project::MessageHeader* header);
  private:
  const ::Project::MessageHeader& _internal_header() const;
  ::Project::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Project::MessageHeader* header);
  ::Project::MessageHeader* unsafe_arena_release_header();

  // int64 ClientSequence = 2;
  void clear_clientsequence();
  ::PROTOBUF_NAMESPACE_ID::int64 clientsequence() const;
  void set_clientsequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_clientsequence() const;
  void _internal_set_clientsequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 ServerSequence = 3;
  void clear_serversequence();
  ::PROTOBUF_NAMESPACE_ID::int64 serversequence() const;
  void set_serversequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_serversequence() const;
  void _internal_set_serversequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 SenderProcessID = 4;
  void clear_senderprocessid();
  ::PROTOBUF_NAMESPACE_ID::int64 senderprocessid() const;
  void set_senderprocessid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_senderprocessid() const;
  void _internal_set_senderprocessid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Project.RandomMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr randomdescriptor_;
  ::Project::MessageHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int64 clientsequence_;
  ::PROTOBUF_NAMESPACE_ID::int64 serversequence_;
  ::PROTOBUF_NAMESPACE_ID::int64 senderprocessid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// -------------------------------------------------------------------

class ServerError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Project.ServerError) */ {
 public:
  inline ServerError() : ServerError(nullptr) {}
  ~ServerError() override;
  explicit constexpr ServerError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerError(const ServerError& from);
  ServerError(ServerError&& from) noexcept
    : ServerError() {
    *this = ::std::move(from);
  }

  inline ServerError& operator=(const ServerError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerError& operator=(ServerError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerError& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerError* internal_default_instance() {
    return reinterpret_cast<const ServerError*>(
               &_ServerError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServerError& a, ServerError& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerError* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerError* New() const final {
    return new ServerError();
  }

  ServerError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerError>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerError& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServerError& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Project.ServerError";
  }
  protected:
  explicit ServerError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorDescriptorFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kErrorTypeFieldNumber = 2,
  };
  // string ErrorDescriptor = 3;
  void clear_errordescriptor();
  const std::string& errordescriptor() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errordescriptor(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errordescriptor();
  PROTOBUF_MUST_USE_RESULT std::string* release_errordescriptor();
  void set_allocated_errordescriptor(std::string* errordescriptor);
  private:
  const std::string& _internal_errordescriptor() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errordescriptor(const std::string& value);
  std::string* _internal_mutable_errordescriptor();
  public:

  // .Project.MessageHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::Project::MessageHeader& header() const;
  PROTOBUF_MUST_USE_RESULT ::Project::MessageHeader* release_header();
  ::Project::MessageHeader* mutable_header();
  void set_allocated_header(::Project::MessageHeader* header);
  private:
  const ::Project::MessageHeader& _internal_header() const;
  ::Project::MessageHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::Project::MessageHeader* header);
  ::Project::MessageHeader* unsafe_arena_release_header();

  // int32 ErrorType = 2;
  void clear_errortype();
  ::PROTOBUF_NAMESPACE_ID::int32 errortype() const;
  void set_errortype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errortype() const;
  void _internal_set_errortype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Project.ServerError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordescriptor_;
  ::Project::MessageHeader* header_;
  ::PROTOBUF_NAMESPACE_ID::int32 errortype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_project_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageHeader

// .Project.MessageType Type = 1;
inline void MessageHeader::clear_type() {
  type_ = 0;
}
inline ::Project::MessageType MessageHeader::_internal_type() const {
  return static_cast< ::Project::MessageType >(type_);
}
inline ::Project::MessageType MessageHeader::type() const {
  // @@protoc_insertion_point(field_get:Project.MessageHeader.Type)
  return _internal_type();
}
inline void MessageHeader::_internal_set_type(::Project::MessageType value) {
  
  type_ = value;
}
inline void MessageHeader::set_type(::Project::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Project.MessageHeader.Type)
}

// string TransmissionID = 2;
inline void MessageHeader::clear_transmissionid() {
  transmissionid_.ClearToEmpty();
}
inline const std::string& MessageHeader::transmissionid() const {
  // @@protoc_insertion_point(field_get:Project.MessageHeader.TransmissionID)
  return _internal_transmissionid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageHeader::set_transmissionid(ArgT0&& arg0, ArgT... args) {
 
 transmissionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Project.MessageHeader.TransmissionID)
}
inline std::string* MessageHeader::mutable_transmissionid() {
  std::string* _s = _internal_mutable_transmissionid();
  // @@protoc_insertion_point(field_mutable:Project.MessageHeader.TransmissionID)
  return _s;
}
inline const std::string& MessageHeader::_internal_transmissionid() const {
  return transmissionid_.Get();
}
inline void MessageHeader::_internal_set_transmissionid(const std::string& value) {
  
  transmissionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageHeader::_internal_mutable_transmissionid() {
  
  return transmissionid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageHeader::release_transmissionid() {
  // @@protoc_insertion_point(field_release:Project.MessageHeader.TransmissionID)
  return transmissionid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MessageHeader::set_allocated_transmissionid(std::string* transmissionid) {
  if (transmissionid != nullptr) {
    
  } else {
    
  }
  transmissionid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transmissionid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Project.MessageHeader.TransmissionID)
}

// -------------------------------------------------------------------

// UserLogin

// .Project.MessageHeader header = 1;
inline bool UserLogin::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UserLogin::has_header() const {
  return _internal_has_header();
}
inline void UserLogin::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Project::MessageHeader& UserLogin::_internal_header() const {
  const ::Project::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Project::MessageHeader&>(
      ::Project::_MessageHeader_default_instance_);
}
inline const ::Project::MessageHeader& UserLogin::header() const {
  // @@protoc_insertion_point(field_get:Project.UserLogin.header)
  return _internal_header();
}
inline void UserLogin::unsafe_arena_set_allocated_header(
    ::Project::MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Project.UserLogin.header)
}
inline ::Project::MessageHeader* UserLogin::release_header() {
  
  ::Project::MessageHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Project::MessageHeader* UserLogin::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Project.UserLogin.header)
  
  ::Project::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Project::MessageHeader* UserLogin::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Project::MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::Project::MessageHeader* UserLogin::mutable_header() {
  ::Project::MessageHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:Project.UserLogin.header)
  return _msg;
}
inline void UserLogin::set_allocated_header(::Project::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Project::MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Project.UserLogin.header)
}

// int32 ID = 2;
inline void UserLogin::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLogin::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLogin::id() const {
  // @@protoc_insertion_point(field_get:Project.UserLogin.ID)
  return _internal_id();
}
inline void UserLogin::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UserLogin::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Project.UserLogin.ID)
}

// string Name = 3;
inline void UserLogin::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UserLogin::name() const {
  // @@protoc_insertion_point(field_get:Project.UserLogin.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLogin::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Project.UserLogin.Name)
}
inline std::string* UserLogin::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Project.UserLogin.Name)
  return _s;
}
inline const std::string& UserLogin::_internal_name() const {
  return name_.Get();
}
inline void UserLogin::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserLogin::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserLogin::release_name() {
  // @@protoc_insertion_point(field_release:Project.UserLogin.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserLogin::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Project.UserLogin.Name)
}

// string Password = 4;
inline void UserLogin::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& UserLogin::password() const {
  // @@protoc_insertion_point(field_get:Project.UserLogin.Password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLogin::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Project.UserLogin.Password)
}
inline std::string* UserLogin::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Project.UserLogin.Password)
  return _s;
}
inline const std::string& UserLogin::_internal_password() const {
  return password_.Get();
}
inline void UserLogin::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserLogin::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserLogin::release_password() {
  // @@protoc_insertion_point(field_release:Project.UserLogin.Password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Project.UserLogin.Password)
}

// string Authority = 5;
inline void UserLogin::clear_authority() {
  authority_.ClearToEmpty();
}
inline const std::string& UserLogin::authority() const {
  // @@protoc_insertion_point(field_get:Project.UserLogin.Authority)
  return _internal_authority();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLogin::set_authority(ArgT0&& arg0, ArgT... args) {
 
 authority_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Project.UserLogin.Authority)
}
inline std::string* UserLogin::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:Project.UserLogin.Authority)
  return _s;
}
inline const std::string& UserLogin::_internal_authority() const {
  return authority_.Get();
}
inline void UserLogin::_internal_set_authority(const std::string& value) {
  
  authority_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserLogin::_internal_mutable_authority() {
  
  return authority_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserLogin::release_authority() {
  // @@protoc_insertion_point(field_release:Project.UserLogin.Authority)
  return authority_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserLogin::set_allocated_authority(std::string* authority) {
  if (authority != nullptr) {
    
  } else {
    
  }
  authority_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), authority,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Project.UserLogin.Authority)
}

// repeated string Nickname = 6;
inline int UserLogin::_internal_nickname_size() const {
  return nickname_.size();
}
inline int UserLogin::nickname_size() const {
  return _internal_nickname_size();
}
inline void UserLogin::clear_nickname() {
  nickname_.Clear();
}
inline std::string* UserLogin::add_nickname() {
  std::string* _s = _internal_add_nickname();
  // @@protoc_insertion_point(field_add_mutable:Project.UserLogin.Nickname)
  return _s;
}
inline const std::string& UserLogin::_internal_nickname(int index) const {
  return nickname_.Get(index);
}
inline const std::string& UserLogin::nickname(int index) const {
  // @@protoc_insertion_point(field_get:Project.UserLogin.Nickname)
  return _internal_nickname(index);
}
inline std::string* UserLogin::mutable_nickname(int index) {
  // @@protoc_insertion_point(field_mutable:Project.UserLogin.Nickname)
  return nickname_.Mutable(index);
}
inline void UserLogin::set_nickname(int index, const std::string& value) {
  nickname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:Project.UserLogin.Nickname)
}
inline void UserLogin::set_nickname(int index, std::string&& value) {
  nickname_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:Project.UserLogin.Nickname)
}
inline void UserLogin::set_nickname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nickname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Project.UserLogin.Nickname)
}
inline void UserLogin::set_nickname(int index, const char* value, size_t size) {
  nickname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Project.UserLogin.Nickname)
}
inline std::string* UserLogin::_internal_add_nickname() {
  return nickname_.Add();
}
inline void UserLogin::add_nickname(const std::string& value) {
  nickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Project.UserLogin.Nickname)
}
inline void UserLogin::add_nickname(std::string&& value) {
  nickname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Project.UserLogin.Nickname)
}
inline void UserLogin::add_nickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  nickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Project.UserLogin.Nickname)
}
inline void UserLogin::add_nickname(const char* value, size_t size) {
  nickname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Project.UserLogin.Nickname)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UserLogin::nickname() const {
  // @@protoc_insertion_point(field_list:Project.UserLogin.Nickname)
  return nickname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UserLogin::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable_list:Project.UserLogin.Nickname)
  return &nickname_;
}

// -------------------------------------------------------------------

// UserLogout

// .Project.MessageHeader header = 1;
inline bool UserLogout::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool UserLogout::has_header() const {
  return _internal_has_header();
}
inline void UserLogout::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Project::MessageHeader& UserLogout::_internal_header() const {
  const ::Project::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Project::MessageHeader&>(
      ::Project::_MessageHeader_default_instance_);
}
inline const ::Project::MessageHeader& UserLogout::header() const {
  // @@protoc_insertion_point(field_get:Project.UserLogout.header)
  return _internal_header();
}
inline void UserLogout::unsafe_arena_set_allocated_header(
    ::Project::MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Project.UserLogout.header)
}
inline ::Project::MessageHeader* UserLogout::release_header() {
  
  ::Project::MessageHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Project::MessageHeader* UserLogout::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Project.UserLogout.header)
  
  ::Project::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Project::MessageHeader* UserLogout::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Project::MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::Project::MessageHeader* UserLogout::mutable_header() {
  ::Project::MessageHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:Project.UserLogout.header)
  return _msg;
}
inline void UserLogout::set_allocated_header(::Project::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Project::MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Project.UserLogout.header)
}

// int32 ID = 2;
inline void UserLogout::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLogout::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLogout::id() const {
  // @@protoc_insertion_point(field_get:Project.UserLogout.ID)
  return _internal_id();
}
inline void UserLogout::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UserLogout::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Project.UserLogout.ID)
}

// string Name = 3;
inline void UserLogout::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UserLogout::name() const {
  // @@protoc_insertion_point(field_get:Project.UserLogout.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLogout::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Project.UserLogout.Name)
}
inline std::string* UserLogout::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Project.UserLogout.Name)
  return _s;
}
inline const std::string& UserLogout::_internal_name() const {
  return name_.Get();
}
inline void UserLogout::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserLogout::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserLogout::release_name() {
  // @@protoc_insertion_point(field_release:Project.UserLogout.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserLogout::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Project.UserLogout.Name)
}

// -------------------------------------------------------------------

// RandomMessage

// .Project.MessageHeader header = 1;
inline bool RandomMessage::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RandomMessage::has_header() const {
  return _internal_has_header();
}
inline void RandomMessage::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Project::MessageHeader& RandomMessage::_internal_header() const {
  const ::Project::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Project::MessageHeader&>(
      ::Project::_MessageHeader_default_instance_);
}
inline const ::Project::MessageHeader& RandomMessage::header() const {
  // @@protoc_insertion_point(field_get:Project.RandomMessage.header)
  return _internal_header();
}
inline void RandomMessage::unsafe_arena_set_allocated_header(
    ::Project::MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Project.RandomMessage.header)
}
inline ::Project::MessageHeader* RandomMessage::release_header() {
  
  ::Project::MessageHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Project::MessageHeader* RandomMessage::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Project.RandomMessage.header)
  
  ::Project::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Project::MessageHeader* RandomMessage::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Project::MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::Project::MessageHeader* RandomMessage::mutable_header() {
  ::Project::MessageHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:Project.RandomMessage.header)
  return _msg;
}
inline void RandomMessage::set_allocated_header(::Project::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Project::MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Project.RandomMessage.header)
}

// int64 ClientSequence = 2;
inline void RandomMessage::clear_clientsequence() {
  clientsequence_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RandomMessage::_internal_clientsequence() const {
  return clientsequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RandomMessage::clientsequence() const {
  // @@protoc_insertion_point(field_get:Project.RandomMessage.ClientSequence)
  return _internal_clientsequence();
}
inline void RandomMessage::_internal_set_clientsequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  clientsequence_ = value;
}
inline void RandomMessage::set_clientsequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_clientsequence(value);
  // @@protoc_insertion_point(field_set:Project.RandomMessage.ClientSequence)
}

// int64 ServerSequence = 3;
inline void RandomMessage::clear_serversequence() {
  serversequence_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RandomMessage::_internal_serversequence() const {
  return serversequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RandomMessage::serversequence() const {
  // @@protoc_insertion_point(field_get:Project.RandomMessage.ServerSequence)
  return _internal_serversequence();
}
inline void RandomMessage::_internal_set_serversequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  serversequence_ = value;
}
inline void RandomMessage::set_serversequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_serversequence(value);
  // @@protoc_insertion_point(field_set:Project.RandomMessage.ServerSequence)
}

// int64 SenderProcessID = 4;
inline void RandomMessage::clear_senderprocessid() {
  senderprocessid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RandomMessage::_internal_senderprocessid() const {
  return senderprocessid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RandomMessage::senderprocessid() const {
  // @@protoc_insertion_point(field_get:Project.RandomMessage.SenderProcessID)
  return _internal_senderprocessid();
}
inline void RandomMessage::_internal_set_senderprocessid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  senderprocessid_ = value;
}
inline void RandomMessage::set_senderprocessid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_senderprocessid(value);
  // @@protoc_insertion_point(field_set:Project.RandomMessage.SenderProcessID)
}

// string RandomDescriptor = 5;
inline void RandomMessage::clear_randomdescriptor() {
  randomdescriptor_.ClearToEmpty();
}
inline const std::string& RandomMessage::randomdescriptor() const {
  // @@protoc_insertion_point(field_get:Project.RandomMessage.RandomDescriptor)
  return _internal_randomdescriptor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RandomMessage::set_randomdescriptor(ArgT0&& arg0, ArgT... args) {
 
 randomdescriptor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Project.RandomMessage.RandomDescriptor)
}
inline std::string* RandomMessage::mutable_randomdescriptor() {
  std::string* _s = _internal_mutable_randomdescriptor();
  // @@protoc_insertion_point(field_mutable:Project.RandomMessage.RandomDescriptor)
  return _s;
}
inline const std::string& RandomMessage::_internal_randomdescriptor() const {
  return randomdescriptor_.Get();
}
inline void RandomMessage::_internal_set_randomdescriptor(const std::string& value) {
  
  randomdescriptor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RandomMessage::_internal_mutable_randomdescriptor() {
  
  return randomdescriptor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RandomMessage::release_randomdescriptor() {
  // @@protoc_insertion_point(field_release:Project.RandomMessage.RandomDescriptor)
  return randomdescriptor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RandomMessage::set_allocated_randomdescriptor(std::string* randomdescriptor) {
  if (randomdescriptor != nullptr) {
    
  } else {
    
  }
  randomdescriptor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), randomdescriptor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Project.RandomMessage.RandomDescriptor)
}

// -------------------------------------------------------------------

// ServerError

// .Project.MessageHeader header = 1;
inline bool ServerError::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ServerError::has_header() const {
  return _internal_has_header();
}
inline void ServerError::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::Project::MessageHeader& ServerError::_internal_header() const {
  const ::Project::MessageHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::Project::MessageHeader&>(
      ::Project::_MessageHeader_default_instance_);
}
inline const ::Project::MessageHeader& ServerError::header() const {
  // @@protoc_insertion_point(field_get:Project.ServerError.header)
  return _internal_header();
}
inline void ServerError::unsafe_arena_set_allocated_header(
    ::Project::MessageHeader* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Project.ServerError.header)
}
inline ::Project::MessageHeader* ServerError::release_header() {
  
  ::Project::MessageHeader* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Project::MessageHeader* ServerError::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:Project.ServerError.header)
  
  ::Project::MessageHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::Project::MessageHeader* ServerError::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::Project::MessageHeader>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::Project::MessageHeader* ServerError::mutable_header() {
  ::Project::MessageHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:Project.ServerError.header)
  return _msg;
}
inline void ServerError::set_allocated_header(::Project::MessageHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Project::MessageHeader>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:Project.ServerError.header)
}

// int32 ErrorType = 2;
inline void ServerError::clear_errortype() {
  errortype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerError::_internal_errortype() const {
  return errortype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerError::errortype() const {
  // @@protoc_insertion_point(field_get:Project.ServerError.ErrorType)
  return _internal_errortype();
}
inline void ServerError::_internal_set_errortype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errortype_ = value;
}
inline void ServerError::set_errortype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errortype(value);
  // @@protoc_insertion_point(field_set:Project.ServerError.ErrorType)
}

// string ErrorDescriptor = 3;
inline void ServerError::clear_errordescriptor() {
  errordescriptor_.ClearToEmpty();
}
inline const std::string& ServerError::errordescriptor() const {
  // @@protoc_insertion_point(field_get:Project.ServerError.ErrorDescriptor)
  return _internal_errordescriptor();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerError::set_errordescriptor(ArgT0&& arg0, ArgT... args) {
 
 errordescriptor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Project.ServerError.ErrorDescriptor)
}
inline std::string* ServerError::mutable_errordescriptor() {
  std::string* _s = _internal_mutable_errordescriptor();
  // @@protoc_insertion_point(field_mutable:Project.ServerError.ErrorDescriptor)
  return _s;
}
inline const std::string& ServerError::_internal_errordescriptor() const {
  return errordescriptor_.Get();
}
inline void ServerError::_internal_set_errordescriptor(const std::string& value) {
  
  errordescriptor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerError::_internal_mutable_errordescriptor() {
  
  return errordescriptor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerError::release_errordescriptor() {
  // @@protoc_insertion_point(field_release:Project.ServerError.ErrorDescriptor)
  return errordescriptor_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServerError::set_allocated_errordescriptor(std::string* errordescriptor) {
  if (errordescriptor != nullptr) {
    
  } else {
    
  }
  errordescriptor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errordescriptor,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Project.ServerError.ErrorDescriptor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Project

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Project::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Project::MessageType>() {
  return ::Project::MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_project_2eproto
